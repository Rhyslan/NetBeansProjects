/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package unit_3.outcome_1;

/**
 *
 * @author dylan
 */

// Imports
import java.nio.file.*;
import java.io.*;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class UI_Design extends javax.swing.JFrame {

    /**
     * Creates new form UI_Design
     */
    public UI_Design() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // Generate the array to store the data from the file
    class generateArray{
        // Globally accessable array
        private static String[][] loadedData;
        private static int lines = 0;
        private static Path dataFile;
        private static boolean saved = true;
        
        // Globally accessable file length
        public static int fileLength(Path file) {
            // Number of lines to be in the array
            lines = 0;
            try {
                // Load the file parsed through the parameter
                InputStream input = new BufferedInputStream(Files.newInputStream(file));
                BufferedReader reader = new BufferedReader(new InputStreamReader(input));
                
                // Updates lines to length of file
                while (reader.readLine() != null) lines++;
                
                input.close();
                reader.close();
            }
            catch (IOException e) {
                System.out.println("Message: " + e);
            }
            return lines;
        }
        
        // Globally accessable array creation
        public static String[][] createArray(int length){           
            // Set the length of the array
            loadedData = new String[length][3]; 
            
            return loadedData;
        }
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        recordNum = new javax.swing.JComboBox<>();
        nameText = new javax.swing.JTextField();
        classText = new javax.swing.JTextField();
        yearText = new javax.swing.JTextField();
        load = new javax.swing.JButton();
        addRecord = new javax.swing.JButton();
        save = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        recordNumber = new javax.swing.JLabel();
        editRecord = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nameSort = new javax.swing.JButton();
        yearSort = new javax.swing.JButton();
        classSort = new javax.swing.JButton();

        jToggleButton1.setText("Edit Record");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitListener(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Heading: Name, Class, Year");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));

        recordNum.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Empty" }));
        recordNum.setToolTipText("Record Number");
        recordNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordNumActionPerformed(evt);
            }
        });
        getContentPane().add(recordNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, -1, -1));

        nameText.setEditable(false);
        nameText.setText("Empty");
        nameText.setToolTipText("Name");
        getContentPane().add(nameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 130, 70, -1));

        classText.setEditable(false);
        classText.setText("Empty");
        classText.setToolTipText("Class");
        getContentPane().add(classText, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, 70, -1));

        yearText.setEditable(false);
        yearText.setText("Empty");
        yearText.setToolTipText("Year");
        getContentPane().add(yearText, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 130, 70, -1));

        load.setText("Load");
        load.setToolTipText("Load Data");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });
        getContentPane().add(load, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, -1, -1));

        addRecord.setText("Add Record");
        addRecord.setToolTipText("Add Record");
        addRecord.setEnabled(false);
        addRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRecordActionPerformed(evt);
            }
        });
        getContentPane().add(addRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        save.setText("Save");
        save.setToolTipText("Save Records");
        save.setEnabled(false);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        getContentPane().add(save, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 300, -1, -1));

        exit.setText("Exit");
        exit.setToolTipText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 300, -1, -1));

        recordNumber.setText("Record Number");
        getContentPane().add(recordNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, -1, -1));

        editRecord.setText("Edit Record");
        editRecord.setToolTipText("Edit Record");
        editRecord.setEnabled(false);
        editRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRecordActionPerformed(evt);
            }
        });
        getContentPane().add(editRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, -1));

        jLabel2.setText("Name");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, -1, -1));

        jLabel3.setText("Class");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, -1, -1));

        jLabel4.setText("Year");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 110, -1, -1));

        nameSort.setText("Sort");
        nameSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameSortActionPerformed(evt);
            }
        });
        getContentPane().add(nameSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, 70, -1));

        yearSort.setText("Sort");
        getContentPane().add(yearSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 160, 70, -1));

        classSort.setText("Sort");
        classSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classSortActionPerformed(evt);
            }
        });
        getContentPane().add(classSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 160, 70, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        // Path of the data file
        JFileChooser fileBrowser = new JFileChooser("C:/Users/dylan/School/Year 12/Software Development/NetBeansProjects/Unit_3-Outcome_1/src/unit_3/outcome_1/");
        fileBrowser.setSelectedFile(new File("record.txt"));
        fileBrowser.addChoosableFileFilter(new FileNameExtensionFilter("Text Documents", "txt"));
        fileBrowser.setAcceptAllFileFilterUsed(false);
        int r = fileBrowser.showOpenDialog(null);
        Path file = null;
        
        if (r == JFileChooser.APPROVE_OPTION) {
            file = Paths.get(fileBrowser.getSelectedFile().getAbsolutePath());
            generateArray.dataFile = file;
        }
        
        String s;
        String delimiter = ", ";
        
        try {
            int lines = generateArray.fileLength(file);
            // Load and set up a reader
            BufferedInputStream input = new BufferedInputStream(Files.newInputStream(file));
            BufferedReader reader = new BufferedReader(new InputStreamReader(input));
            
            // Use global array creation
            String[][] splitArray = generateArray.createArray(lines);
            int recordIndex = 0;
            
            // Blank line and read first line of the file
            System.out.println();
            s = reader.readLine();
            
            // Loop while s has data
            while (s != null) {
                // Assign the specified sub-array to the current line of the file
                splitArray[recordIndex] = s.split(delimiter);
                s = reader.readLine();
                recordIndex += 1;                
            }
            input.close();
            reader.close();
           
            recordNum.removeAllItems();
            
            // Assign the comboBox options and the global array to the loaded data
            for (int i = 0; i < splitArray.length; i++) {
                recordNum.addItem(Integer.toString(i + 1));
                generateArray.loadedData[i] = splitArray[i];
                System.out.println(Arrays.toString(splitArray[i]));
            }
        }
        catch (IOException e) {
            System.out.println("Message: " + e);
        }
        
        
        addRecord.setEnabled(true);
        editRecord.setEnabled(true);
    }//GEN-LAST:event_loadActionPerformed

    private void addRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRecordActionPerformed
        String newName = (String)JOptionPane.showInputDialog(null, "Name:");
        if ((newName == null)) return;
        
        String newClass = (String)JOptionPane.showInputDialog(null, "Class:");
        if ((newClass == null)) return;
        
        String newYear = (String)JOptionPane.showInputDialog(null, "Year:");
        if ((newYear == null)) return;
                
        String[][] oldData = generateArray.loadedData;
        
        String[][] newData = {{newName, newClass, newYear}};
               
        //generateArray.loadedData = generateArray.createArray(generateArray.lines++);
        
        String[][] fullData = generateArray.createArray(generateArray.lines + 1);
        
        for (int i = 0; i < fullData.length; i++) {
            if (i < fullData.length - 1) {
                fullData[i] = oldData[i];
            }
            else if (i == fullData.length - 1) {
                fullData[i] = newData[0];
            }
        }
        
        generateArray.loadedData = generateArray.createArray(generateArray.lines + 1);
        generateArray.loadedData = fullData;
        
        System.out.println();
        
        recordNum.removeAllItems();

        // Assign the comboBox options and the global array to the loaded data
        for (int i = 0; i < generateArray.loadedData.length; i++) {
            recordNum.addItem(Integer.toString(i + 1));
            System.out.println(Arrays.toString(generateArray.loadedData[i]));
        }
        
        generateArray.saved = false;
        save.setEnabled(true);
    }//GEN-LAST:event_addRecordActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        if (generateArray.saved == false) {
            int confirmExit = (int) JOptionPane.showConfirmDialog(null, "Unsaved records!\nDo you wish to proceed?", "Unsaved Records", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
            if (confirmExit == 0) System.exit(0);
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_exitActionPerformed

    private void recordNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordNumActionPerformed
        // Load text fields based on the selected record index 
        if (recordNum.getSelectedItem() != null) {
            nameText.setText(generateArray.loadedData[recordNum.getSelectedIndex()][0]);
            classText.setText(generateArray.loadedData[recordNum.getSelectedIndex()][1]);
            yearText.setText(generateArray.loadedData[recordNum.getSelectedIndex()][2]);
        }
    }//GEN-LAST:event_recordNumActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try {
            FileWriter writer = new FileWriter(generateArray.dataFile.toString());
            String data;
                    
            for (int i = 0; i < generateArray.loadedData.length; i++) {
                data = Arrays.toString(generateArray.loadedData[i]);
                data = data.substring(1, data.length() - 1);
                
                writer.write(data);
                writer.write("\n");
            }
            writer.close();
            
            JFrame frame = new JFrame();
            JOptionPane.showMessageDialog(frame, "File Saved Successfully");  
        }
        catch (IOException e) {
            System.out.println("Message: " + e);
        }
        
        generateArray.saved = true;
        save.setEnabled(false);
    }//GEN-LAST:event_saveActionPerformed

    private void editRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRecordActionPerformed
        JFrame frame = new JFrame();
        String newName = (String)JOptionPane.showInputDialog(frame, "Name:", generateArray.loadedData[recordNum.getSelectedIndex()][0]);
        if ((newName == null)) return;
        generateArray.loadedData[recordNum.getSelectedIndex()][0] = newName;
        
        String newClass = (String)JOptionPane.showInputDialog(frame, "Class:", generateArray.loadedData[recordNum.getSelectedIndex()][1]);
        if ((newClass == null)) return;
        generateArray.loadedData[recordNum.getSelectedIndex()][1] = newClass;
        
        String newYear = (String)JOptionPane.showInputDialog(frame, "Year:", generateArray.loadedData[recordNum.getSelectedIndex()][2]);
        if ((newYear == null)) return;
        generateArray.loadedData[recordNum.getSelectedIndex()][2] = newYear;
        
        recordNum.setSelectedIndex(recordNum.getSelectedIndex());
        
        save.setEnabled(true);
        editRecord.setEnabled(false);
    }//GEN-LAST:event_editRecordActionPerformed

    private void exitListener(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitListener
        if (generateArray.saved == false) {
            int confirmExit = (int) JOptionPane.showConfirmDialog(null, "Unsaved records!\nDo you wish to proceed?", "Unsaved Records", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
            if (confirmExit == 0) System.exit(0);
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_exitListener

    private void nameSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameSortActionPerformed
        System.out.println("a".compareTo("b")); // Less than (-1)
        System.out.println("b".compareTo("a")); // Greater than (1)
        System.out.println("a".compareTo("a")); // Equal to (0)
        // This means the 'value' of strings increase as the letters progress through the alphabet
        
        String me = "Dylan";
        String log = "Logan";
        //System.out.println((me.charAt(0)).compareTo((log.charAt(0))));
    }//GEN-LAST:event_nameSortActionPerformed

    private void classSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classSortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_classSortActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI_Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI_Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI_Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI_Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI_Design().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRecord;
    private javax.swing.JButton classSort;
    private javax.swing.JTextField classText;
    private javax.swing.JButton editRecord;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JButton load;
    private javax.swing.JButton nameSort;
    private javax.swing.JTextField nameText;
    private javax.swing.JComboBox<String> recordNum;
    private javax.swing.JLabel recordNumber;
    private javax.swing.JButton save;
    private javax.swing.JButton yearSort;
    private javax.swing.JTextField yearText;
    // End of variables declaration//GEN-END:variables
}
